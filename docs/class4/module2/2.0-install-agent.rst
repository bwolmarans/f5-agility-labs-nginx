.. _2.0-install-agent:

Exercise 2.0: Installing NGINX Agent
####################################

Objective
=========

Recall from the Introduction, overview, and Architecture, Instance Manager relies on NGINX Agent to manage NGINX instances.

Install ``nginx-agent`` and configure it to work with existing NGINX instance.


Guide
=====

Installation of `NGINX Agent <https://docs.nginx.com/nginx-instance-manager/getting-started/agent/>`__ 
follows a process that is very similar to installing 
`NGINX Plus <https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-plus/>`__.


Step 1 - Install on Centos 7 
------

TLDR;

Centos 7 is unsupported, but we have two boxes running Centos 7 and NGINX OSS in the lab.
The normal install method won't work.
There is a detailed install at the bottom of this page, but in the interests of time, NGINX Agent is already installed, you just have to start NGINX Agent.

So, only for the Centos 7 systems:

``NGINX Oss - Website 01`` at ip address ``10.1.1.8``

``NGINX Oss - Website 02`` at ip address ``10.1.1.7``

Use the ``WEB SHELL`` link and do ``systemctl start nginx-agent``

Step 1 - Install on NGINX Plus - app-pdx-01 
------

We are going to use ``NGINX Plus - app-pdx-01`` which is running Ubuntu 20.04, at IP Address 10.1.1.5 and install NGINX Agent to manage the NGINX instances running on this host.

Check your scan results, you will see ip address 10.1.1.5 and this is unmanaged.

Click 10.1.1.5 and you will see the install command. 

This install command uses the domain name for the UDF lab.

.. note::

   This command has been adjusted around this lab's unique network environment. Please use the command below and not the command (with the UDF FQDN URL) from the NIM UI Status page.

Open ``WEB SHELL`` on ``NGINX Plus - app-pdx-01`` and do

``curl -k https://10.1.1.4/install/nginx-agent | sh``

Once the script has completed you should see the following output which indicates the agent was successfully installed and instructions on how to start the software:

.. image:: ../module2/agent_complete.png


Step 2: Enable and start the service
------------------------------------------------
The installation does not start the NGINX Agent, so you need to start it.

Run the following command ``sudo systemctl start nginx-agent``

Once that is executed confirm the service is running by executing the following command :
``sudo systemctl status nginx-agent``. 

.. image:: ../module2/enable_agent.png


Step 3: Look at details of an NGINX instance 
--------------------------------------------

Run another scan test and notice 10.1.1.5 is in a managed status.

Navigate to the Instances page and look for the instance we added.

Notice how we have columns that show Hostname and Type. 

Our instances are named according to the Operating System and NGINX type they run.

Let's focus on the instance ``app-pdx-01`` and click the Hostname and more information on the instance will appear, scroll down to Network Interface and notice this is our 10.1.1.5 instance.

Click the instances tab to return to the instances list.

Centos 7 Detailed Install (optional)
------

Note: Because Centos 7 went end of life June 2024, NIM has dropped support also.  For this lab, we can still use Centos 7, but special steps are needed.

Only for the following Centos systems:

``NGINX Oss - Website 01`` at ip address ``10.1.1.8``

``NGINX Oss - Website 02`` at ip address ``10.1.1.7``


Use the ``WEB SHELL`` link to install Agent manually using the instructions:

https://docs.nginx.com/nginx-agent/installation-upgrade/installation-oss/#installing-nginx-agent-on-rhel-centos-rocky-linux-almalinux-and-oracle-linux

Then edit the /etc/nginx-agent/nginx-agent.conf file to have only the following content:

.. code-block:: nginx

  #
  # /etc/nginx-agent/nginx-agent.conf
  #
  # Configuration file for NGINX Agent.
  #
  # This file is to track agent configuration values that are meant to be statically set. There  
  # are additional agent configuration values that are set via the API and agent install script
  # which can be found in /etc/nginx-agent/agent-dynamic.conf. 
  
  # specify the server grpc port to connect to
  server:
    # host of the control plane
    host: 10.1.1.4
    grpcPort: 443
    # provide servername overrides if using SNI
    # metrics: ""
    # command: ""
  # tls options
  tls:
    # enable tls in the nginx-agent setup for grpcs
    # default to enable to connect with secure connection but without client cert for mtls
    enable: true
    # specify the absolute path to the CA file, when mtls is enabled
    # ca: /etc/nginx-agent/ca.pem
    # specify the absolute path to the client cert, when mtls is enabled
    # cert: /etc/nginx-agent/manager-client.crt
    # specify the absolute path to the client cert key, when mtls is enabled
    # key: /etc/nginx-agent/manager-client.crt
    # controls whether the server certificate chain and host name are verified.
    # for production use, see instructions for configuring TLS
    skip_verify: true
  log:
    # set log level (panic, fatal, error, info, debug, trace; default "info")
    level: info
    # set log path. if empty, don't log to file.
    path: /var/log/nginx-agent/
  # data plane status message / 'heartbeat'
  nginx:
    # path of NGINX logs to exclude
    exclude_logs: ""
    socket: "unix:/var/run/nginx-agent/nginx.sock"
  
  dataplane:
    sync: 
      enable: true
    status:
      # poll interval for data plane status - the frequency the agent will query the dataplane for changes
      poll_interval: 30s
      # report interval for data plane status - the maximum duration to wait before syncing dataplane information if no updates have being observed
      report_interval: 24h
    events:
      # report data plane events back to the control plane
      enable: true
  metrics:
    # specify the size of a buffer to build before sending metrics
    bulk_size: 20
    # specify metrics poll interval
    report_interval: 1m
    collection_interval: 15s
    mode: aggregated
  
  # OSS NGINX default config path
  # path to aux file dirs can also be added
  config_dirs: "/etc/nginx:/usr/local/etc/nginx:/usr/share/nginx/modules:/etc/nms"

Selinux is going to block nginx-agent, so we need to temporarily  turn off selinux (temporarily for this lab, as full configuration for nginx-agent is outside the scope of this lab)

do 


``setenforce 0``

and then do 

``systemctl restart nginx-agent``

``systemctl status nginx-agent``

Make sure nginx-agent is running.


